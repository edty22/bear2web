/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.42
 * Generated at: 2017-05-13 07:25:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.pattern;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.sql.*;
import java.math.*;
import bear2web.util.*;
import bear2web.model.*;
import bear2web.mgr.*;
import java.text.*;
import java.net.URLEncoder;

public final class view_005fperformance_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("bear2web.model");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("bear2web.util");
    _jspx_imports_packages.add("java.math");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("bear2web.mgr");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.URLEncoder");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=windows-31j");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

//ログイン中のメンバーのみアクセス可能
UserAccount ua = (UserAccount) session.getAttribute("account");
if (ua == null) {

	//ログイン失敗
	//認証していません
	response.sendRedirect("/jsp/login.jsp?error_code=002");
}

//=== パラメータ受け取り ===
request.setCharacterEncoding("Windows-31J");

String patternCd = request.getParameter("pattern_cd");
if (patternCd == null) {
	patternCd = "PTN0001";	//初期値
}

//== 取得
PatternMgr pm = new PatternMgr();
Pattern ptn = pm.getPatternByCd(patternCd);

StatisticsMgr sm = new StatisticsMgr();

List<Statistics> stes = sm.getStatisticsByCd(patternCd, null);

//マーケット比率計算
double totalCnt = 0;
double r80OverCnt = 0;
double r70Cnt = 0;
double r60Cnt = 0;
double r55Cnt = 0;
double r50Cnt = 0;
double r45Cnt = 0;
double r40Cnt = 0;
double r30Cnt = 0;
double r20Cnt = 0;
double r20UnderCnt = 0;

for (Iterator<Statistics> it = stes.iterator(); it.hasNext();) {

	Statistics st = (Statistics)it.next();

	double targetRatio = ((double)st.getTargetCnt() / (double)st.getTotalCnt() ) * 100 ;
	BigDecimal x = new BigDecimal(targetRatio);
	x = x.setScale(3, BigDecimal.ROUND_HALF_UP);
	String dispTragetRatio = x.toString();

	double pairRatio = ((double)st.getPairCnt() / (double)st.getTotalCnt() ) * 100 ;
	BigDecimal y = new BigDecimal(pairRatio);
	y = y.setScale(3, BigDecimal.ROUND_HALF_UP);
	String dispPairRatio = y.toString();

	totalCnt += st.getTargetCnt();

	if (targetRatio > 80.0) {
		r80OverCnt += st.getTargetCnt();
	} else if (targetRatio > 70.0) {
		r70Cnt += st.getTargetCnt();
	} else if (targetRatio > 60.0) {
		r60Cnt += st.getTargetCnt();
	} else if (targetRatio > 55.0) {
		r55Cnt += st.getTargetCnt();
	} else if (targetRatio > 50.0) {
		r50Cnt += st.getTargetCnt();
	} else if (targetRatio > 45.0) {
		r45Cnt += st.getTargetCnt();
	} else if (targetRatio > 40.0) {
		r40Cnt += st.getTargetCnt();
	} else if (targetRatio > 30.0) {
		r30Cnt += st.getTargetCnt();
	} else if (targetRatio > 20.0) {
		r20Cnt += st.getTargetCnt();
	} else {
		r20UnderCnt += st.getTargetCnt();
	}

}

BigDecimal tmp1 = new BigDecimal(r80OverCnt / totalCnt * 100);
tmp1 = tmp1.setScale(3, BigDecimal.ROUND_HALF_UP);
String s80OverCnt = tmp1.toString();

BigDecimal tmp2 = new BigDecimal(r70Cnt / totalCnt * 100);
tmp2 = tmp2.setScale(3, BigDecimal.ROUND_HALF_UP);
String s70Cnt = tmp2.toString();

BigDecimal tmp3 = new BigDecimal(r60Cnt / totalCnt * 100);
tmp3 = tmp3.setScale(3, BigDecimal.ROUND_HALF_UP);
String s60Cnt = tmp3.toString();

BigDecimal tmp4 = new BigDecimal(r55Cnt / totalCnt * 100);
tmp4 = tmp4.setScale(3, BigDecimal.ROUND_HALF_UP);
String s55Cnt = tmp4.toString();

BigDecimal tmp5 = new BigDecimal(r50Cnt / totalCnt * 100);
tmp5 = tmp5.setScale(3, BigDecimal.ROUND_HALF_UP);
String s50Cnt = tmp5.toString();

BigDecimal tmp6 = new BigDecimal(r45Cnt / totalCnt * 100);
tmp6 = tmp6.setScale(3, BigDecimal.ROUND_HALF_UP);
String s45Cnt = tmp6.toString();

BigDecimal tmp7 = new BigDecimal(r40Cnt / totalCnt * 100);
tmp7 = tmp7.setScale(3, BigDecimal.ROUND_HALF_UP);
String s40Cnt = tmp7.toString();

BigDecimal tmp8 = new BigDecimal(r30Cnt / totalCnt * 100);
tmp8 = tmp8.setScale(3, BigDecimal.ROUND_HALF_UP);
String s30Cnt = tmp8.toString();

BigDecimal tmp9 = new BigDecimal(r20Cnt / totalCnt * 100);
tmp9 = tmp9.setScale(3, BigDecimal.ROUND_HALF_UP);
String s20Cnt = tmp9.toString();

BigDecimal tmp10 = new BigDecimal(r20UnderCnt / totalCnt * 100);
tmp10 = tmp10.setScale(3, BigDecimal.ROUND_HALF_UP);
String s20UnderCnt = tmp10.toString();


      out.write("\r\n");
      out.write("\r\n");
      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("\r\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=windows-31j\">\n");
      out.write("<title>分析システム</title>\n");
      out.write("</head>\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<table width=\"100%\">\r\n");
      out.write("<tr>\r\n");
      out.write("  <td nowrap=\"nowrap\">\r\n");
      out.write("    <font size=\"4\"><b>パターン実績分布</b></font>\r\n");
      out.write("  </td>\r\n");
      out.write("  <td width=\"100%\" align=\"right\"></td>\r\n");
      out.write("</tr>\r\n");
      out.write("</table>\n");
      out.write("\n");
      out.write("<font size=\"-1\">\n");
      out.write("<table bgcolor=\"#9999CC\" border=\"0\" cellspacing=\"2\" cellpadding=\"2\">\n");
      out.write("  <tr bgcolor=\"#CCCCFF\">\n");
      out.write("    <th>パターンコード</th>\n");
      out.write("    <td width=\"200\" bgcolor=\"#FFFFFF\" nowrap>");
      out.print( ptn.getPatternCd() );
      out.write("</td>\n");
      out.write("  </tr>\n");
      out.write("  <tr bgcolor=\"#CCCCFF\">\n");
      out.write("    <th>名称</th>\n");
      out.write("    <td width=\"200\" bgcolor=\"#FFFFFF\" nowrap>");
      out.print( ptn.getPatternName()  );
      out.write("</td>\n");
      out.write("  </tr>\n");
      out.write("  <tr bgcolor=\"#CCCCFF\">\n");
      out.write("    <th>備考</th>\n");
      out.write("    <td width=\"200\" bgcolor=\"#FFFFFF\" nowrap>");
      out.print( ptn.getMemo()  );
      out.write("</td>\n");
      out.write("  </tr>\n");
      out.write("  <tr bgcolor=\"#CCCCFF\">\n");
      out.write("    <th>総件数</th>\n");
      out.write("    <td width=\"200\" bgcolor=\"#FFFFFF\" nowrap>");
      out.print( totalCnt  );
      out.write(" 件</td>\n");
      out.write("  </tr>\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<br>\n");
      out.write("\n");
      out.write("<table bgcolor=\"#9999CC\" border=\"0\" cellspacing=\"2\" cellpadding=\"2\">\n");
      out.write("  <tr bgcolor=\"#CCCCFF\">\n");
      out.write("    <th nowrap>範囲</th>\n");
      out.write("    <th nowrap width=\"100\">比率(%)</th>\n");
      out.write("  </tr>\r\n");
      out.write("\r\n");
      out.write("  <tr>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>80%以上</td>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>");
      out.print( s80OverCnt );
      out.write("%</td>\r\n");
      out.write("  </tr>\n");
      out.write("\n");
      out.write("  <tr>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>70%～80%</td>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>");
      out.print( s70Cnt );
      out.write("%</td>\n");
      out.write("  </tr>\n");
      out.write("\n");
      out.write("  <tr>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>60%～70%</td>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>");
      out.print( s60Cnt );
      out.write("%</td>\n");
      out.write("  </tr>\n");
      out.write("\n");
      out.write("  <tr>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>55%～60%</td>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>");
      out.print( s55Cnt );
      out.write("%</td>\n");
      out.write("  </tr>\n");
      out.write("\n");
      out.write("  <tr>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>50%～55%</td>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>");
      out.print( s50Cnt );
      out.write("%</td>\n");
      out.write("  </tr>\n");
      out.write("\n");
      out.write("  <tr>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>45%～50%</td>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>");
      out.print( s45Cnt );
      out.write("%</td>\n");
      out.write("  </tr>\n");
      out.write("\n");
      out.write("  <tr>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>40%～45%</td>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>");
      out.print( s40Cnt );
      out.write("%</td>\n");
      out.write("  </tr>\n");
      out.write("\n");
      out.write("  <tr>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>30%～40%</td>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>");
      out.print( s30Cnt );
      out.write("%</td>\n");
      out.write("  </tr>\n");
      out.write("\n");
      out.write("  <tr>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>20%～30%</td>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>");
      out.print( s20Cnt );
      out.write("%</td>\n");
      out.write("  </tr>\n");
      out.write("\n");
      out.write("  <tr>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>20%以下</td>\n");
      out.write("    <td bgcolor=\"#FFFFFF\" nowrap>");
      out.print( s20UnderCnt );
      out.write("%</td>\n");
      out.write("  </tr>\n");
      out.write("\n");
      out.write("\n");
      out.write("</table>\r\n");
      out.write("</font>\n");
      out.write("\n");
      out.write("<br>\n");
      out.write("<a href=\"pattern_list.jsp\">パターン一覧へ</a>\r\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
